# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.
"""
Demonstrating the use of compressing a rollout of Atari transitions on the GPU and batch decompressing them on the GPU.
This example may be helpful in the multi-environment case, or when environments are run on the GPU.
Additionally, we can batch our decompression on the GPU in one go using the collate function.

Results showing transitions per second (T/s).
Mode (using zstd)   Rollout T/s  Sample T/s   Compression Ratio
------------------------------------------------------------
gpu_only            1103         27616        96x
cpu_to_gpu          2095         27870        97x

"""

from typing import Any, Dict, NamedTuple

import gymnasium as gym

import numpy as np

import torch
from torchrl import torchrl_logger as logger
from torchrl.data import ListStorage, ReplayBuffer


class AtariTransition(NamedTuple):
    """Transition tuple generated by the Atari gymnasium environment."""

    observations: np.uint8
    actions: np.uint8
    next_observations: np.uint8
    rewards: np.float32
    terminated: np.bool
    truncated: np.bool
    info: Dict[str, Any]


def setup_atari_environment(seed: int = 42) -> gym.Env:
    """Create and configure the Atari Pong environment."""
    import ale_py

    gym.register_envs(ale_py)
    env = gym.make("ALE/Pong-v5", frameskip=1)
    env = gym.wrappers.AtariPreprocessing(env, frame_skip=5)
    env = gym.wrappers.RecordEpisodeStatistics(env)
    env = gym.wrappers.TransformReward(env, np.sign)
    env = gym.wrappers.FrameStackObservation(env, 4)
    env.action_space.seed(seed)
    env.observation_space.seed(seed)
    return env


def get_gpu_codec():
    """
    Returns a codec for GPU compression using NVIDIA NVCOMP.
    """
    try:
        import nvidia.nvcomp as nvcomp
    except ImportError:
        raise ImportError(
            "Please pip install nvidia-nvcomp to use this example with GPU compression."
        )

    # RAW = Does not add header with nvCOMP metadata, so that the codec can read compressed data from the CPU library
    bitstream_kind = nvcomp.BitstreamKind.RAW
    codec = nvcomp.Codec(algorithm="Zstd", bitstream_kind=bitstream_kind)

    def compressor_fn(data: nvcomp.Array) -> nvcomp.Array:
        return codec.encode(data)

    def decompressor_fn(compressed_data: nvcomp.Array) -> nvcomp.Array:
        return codec.decode(compressed_data, data_type="|u1")

    return compressor_fn, decompressor_fn


def make_compressing_replay_buffer(decompressor_fn) -> ReplayBuffer:
    """
    Creates a ReplayBuffer with CompressedListStorage for GPU compression.
    """
    try:
        import nvidia.nvcomp as nvcomp
    except ImportError:
        raise ImportError(
            "Please pip install nvidia-nvcomp to use this example with GPU compression."
        )
    storage = ListStorage(
        max_size=1000,
        device="cuda",
    )

    def collate_compressed_data_and_batch_decompress(
        data: list[AtariTransition],
    ) -> list[AtariTransition]:
        """We collate the compressed data together so that we can decompress it in a single batch operation."""
        transitions = data

        # gather compressed data
        compressed_obs = [transition.observations for transition in transitions]
        compressed_next_obs = [
            transition.next_observations for transition in transitions
        ]

        # optional checks
        assert all(isinstance(arr, nvcomp.nvcomp_impl.Array) for arr in compressed_obs)
        assert all(
            isinstance(arr, nvcomp.nvcomp_impl.Array) for arr in compressed_next_obs
        )

        # batched decompress is faster
        decompressed_data = decompressor_fn(compressed_obs + compressed_next_obs)

        # gather decompressed data
        decompressed_obses = decompressed_data[: len(compressed_obs)]
        decompressed_next_obses = decompressed_data[len(compressed_obs) :]

        # repack data
        for i, (transition, obs, next_obs) in enumerate(
            zip(transitions, decompressed_obses, decompressed_next_obses)
        ):
            transitions[i] = transition._replace(
                observations=torch.from_dlpack(obs).clone().view(4, 84, 84),
                next_observations=torch.from_dlpack(next_obs).clone().view(4, 84, 84),
            )

        return transitions

    return ReplayBuffer(
        storage=storage,
        batch_size=32,
        collate_fn=collate_compressed_data_and_batch_decompress,
    )


def main():
    # pip install gymnasium ale-py opencv-python-headless
    import time

    try:
        import nvidia.nvcomp as nvcomp
    except ImportError:
        raise ImportError(
            "Please pip install nvidia-nvcomp to use this example with GPU compression."
        )

    # Create Pong environment and get a frame
    env = setup_atari_environment(seed=0)

    compressor_fn, decompressor_fn = get_gpu_codec()

    obs, _ = env.reset(seed=0)
    nv_obs = nvcomp.as_array(obs).cuda(synchronize=False)
    compressed_obs = compressor_fn(nv_obs)
    decompressed_obs = decompressor_fn(compressed_obs)
    pt_obs = torch.from_dlpack(decompressed_obs).clone().view(4, 84, 84)
    assert np.allclose(obs, pt_obs.cpu().numpy())

    rb = make_compressing_replay_buffer(decompressor_fn)

    obs, _ = env.reset(seed=0)
    nv_obs = nvcomp.as_array(obs).cuda(synchronize=False)
    compressed_obs = compressor_fn(nv_obs)

    compression_ratios = []
    num_transitions_in_rollout = 2000

    torch.cuda.synchronize()
    start_time = time.time()
    for _ in range(num_transitions_in_rollout):
        pt_obs = torch.from_dlpack(nv_obs).clone()
        action = env.action_space.sample()

        next_obs, reward, terminated, truncated, info = env.step(action)
        nv_next_obs = nvcomp.as_array(next_obs).cuda(synchronize=False)
        compressed_next_obs = compressor_fn(nv_next_obs)

        compression_ratios.append(
            nv_next_obs.buffer_size / compressed_next_obs.buffer_size
        )

        transition = AtariTransition(
            compressed_obs,
            action,
            compressed_next_obs,
            reward,
            terminated,
            truncated,
            info,
        )
        rb.add(transition)

        if terminated or truncated:
            obs, _ = env.reset()
            nv_obs = nvcomp.as_array(obs).cuda()
        else:
            nv_obs = nv_next_obs
            compressed_obs = compressed_next_obs
    rollout_time = time.time() - start_time

    batched_sampling_and_decompression_duration = 1000
    assert (batched_sampling_and_decompression_duration * 2) <= (
        num_transitions_in_rollout
    )

    batch_size = 32
    torch.cuda.synchronize()
    start_time = time.time()
    for _ in range(100):
        rb.sample(batch_size)
    sample_time = time.time() - start_time

    output = [
        "\nListStorage + ReplayBuffer (GPU compress, GPU decompress) Example:",
        f"avg_compression_ratio={np.array(compression_ratios).mean():0.0f}",
        "rollout with zstd, @ transitions/s={:0.0f}".format(
            num_transitions_in_rollout / rollout_time
        ),
        "batch sampling and decompression with zstd @ transitions/s={:0.0f}".format(
            (100 * batch_size) / sample_time
        ),
    ]

    logger.info("\n\t".join(output))


if __name__ == "__main__":
    main()
